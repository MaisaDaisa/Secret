
პრაქტიკული დავალებები

	სამჯერ  შეიტანეთ ორი  რიცხვი a,b,c  (გამოიყენეთ ოპერატორი for)
	თუ  a-b < c მაშინ y უდრის მინიმალურს k და z-ს შორის;  
	თუ a-b = c  მაშინ     შეამოწმეთ კიდევ შემდეგი პირობები;
	თუ a +b=1    მაშინ  y= 2a+b;
	თუ a +b=2    მაშინ y არ გამოითვლება და გადადით შემდეგ იტერაციაზე
	თუ a +b=3    მაშინ  y=a-b;   
	ყველა სხვა შემთხვევაში y=∛(a^2 )-cos^2⁡〖b^2 〗 (გამოიყენეთ ოპერატორი switch)
	თუ a-b < c  მაშინ y=0;     
https://onlinegdb.com/xpgzg6AGy

	შეადგინეთ პროგრამა რომელიც იპოვის C[5][5] მასივის არამთავარი დიაგონალის მაქსიმალურ ელემენტს და ამ ელემენტის ინდექსებს. იმ სვეტს რომელშიც მდებარეობს მაქსიმალური ელემენტი ადგილს გაუცვლის პირველ სვეტთან, ხოლო იმ სტრიქონს რომელშიც მაქსიმუმი მდებარეობს გადაწერს B[5] მასივში (მასივის ელემენტები შეიტანეთ კონსოლიდან)


https://onlinegdb.com/fkittSxI9


ღია კითხვები:
	დახარისხების რომელი ალგორითმია გამოყენებული შემდეგ პროგრამაში
        int main() {
    int arr[10] = {1, 0, 4, 5, 2, 8, 3, 9, 3, 7};
    int i, j, minIndex, tmp, n = 10;
    for (i = 0; i < n - 1; i++) {
        minIndex = i;
                for (j = i + 1; j < n; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }
                if (minIndex != i) {
            tmp = arr[i];
            arr[i] = arr[minIndex];
            arr[minIndex] = tmp;
        }
    }
       for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
პასუხი: დახარისება (სორტირება) ამორჩევით
	მოცემულია პროგრამა:   
int main() {
    int A[10] = {2, 4, 6, 8, 19, 37, 45, 68, 89, 100};
    int i, low = 0, high = 10, middle, searchKey, iKey, count = 0;
    printf(" შემოიტანეთ საძიებელი მნიშვნელობა: ");
    scanf("%d", &searchKey);
    while (low <= high) {
        middle = (low + high) / 2;
        if (searchKey == A[middle]) {
            iKey = middle;
            count++;
            break;
        } else if (searchKey < A[middle]) {
            high = middle - 1; /* მასივის ზედა ზღვარი */
        } else {
            low = middle + 1; /* მასივის ქვედა ზღვარი */
        }
    }
    if (count != 0) {
        printf(" მასივში მოცემული მნიშვნელობის რიგითი ნომერია - %d\n", iKey);
    } else {
        printf(" მასივში საძიებელი მნიშვნელობის ტოლი ელემენტი არ არის !\n");
    }
    return 0;
}
while  ციკლის რომელ ბიჯზე მოხდება საძიებელი მნიშვნელობის რიგითი ნომრის მოძებნა   თუ searchKey  ცვლადის  მნიშვნელობას შეიტანთ 4-ს
პასუხი: 1 ციკლი იქნება 37, შემდეგ 6იანი მერე 4 იანი ანუ 3 იტერაციაზე (ცილკზე)

ტესტური დავალებები (12 კითხვა - თითო 0.5 ქულა)

	ჩანაწერი  ++x  წარმოადგენს:
	ინკრემენტის ოპერატორის პოსტფიქსურ ფორმას;
	დეკრემენტის ოპერატორის პოსტფიქსურ ფორმას; 
	ინკრემენტის ოპერატორის პრეფიქსულ ფორმას;  ----------------
	დეკრემენტის ოპერატორის პრეფიქსულ ფორმას; 
	რას მიუთითებს % nf ფორმატი?
	მძიმის შემდეგ დასაბეჭდი  ციფრების რაოდენობას; ------------------
	რიცხვის დასაბეჭდად გამოყოფილ  პოზიციებს მარცხენა სწორებით; 
	უნიშნო რიცხვის ბეჭდვას; 
	რიცხვის დასაბეჭდად გამოყოფილ  პოზიციებს მარჯვენა სწორებით; 
	რა შედეგს გამოიტანს კონსოლზე  (ეკრანზე) პროგრამული კოდის შემდეგი ფრაგმენტი?
int x=20, y;
y= x>20? x+25 : x/4;
printf( “%d ,y);
	y=45;  
	y=20; 
	y=5; -------------
	y=0;  
	რომელია  y=sin4x მათემატიკური ფუნქციის სწორი ჩანაწერი C++-ზე?
	y=pow(sin(x),4);  -----------
	y=sin(x)+sin(x);   
	y=pow(sin(x*x));
	 y=sin(x*x);
	რას შეასრულებს შემდეგი ფრაგმენტი?
   const  int N=10;
   int a[N], i;
   for (i=0; i<N; i++)
    a[i]=rand()%31;
	0-დან 31-ჩათვლით ყველა რიცხვს შეიტანს მასივში;
	[0, 30] დიაპაზონიდან  აღებულ შემთხვევით რიცხვებს შეიტანს მასივში; -----------
	[0,31]დიაპაზონიდან აღებულ შემთხვევით რიცხვებს შეიტანს მასივში;
	0-დან  30-მდეყველა რიცხვს შეიტანს მასივში;
	256  (28) ელემენტიან  დახარისხებულ მასივში ორობითი ძებნის დროს  საძიებელი სიდიდის მოსაძებნად საჭიროა
	საძიებელ სიდიდესთან არაუმეტეს 8 შედარება; --------------
	საძიებელ სიდიდესთან არაუმეტეს 256 შედარება;
	საძიებელ    სიდიდესთნ არანაკლებ 9 შედარება;
	საძიებელ სიდიდესთან არაუმეტეს 10 შედარება;
	გვაქვს int b[3] = { 2, 4, 6 }, *bPtr=b; რომელი ოპერატორი მოგვცემს შეცდომას?
	bPtr++;
	bPtr = b+1;
	b++; --------------
	bPtr = &b[0];
	მოცემულია ცვლადების მისამართები: &a=63384,&b=64390,&c=64400. რა შედეგს გამოიტანს პროგრამა 32-ბიტიანი კომპიუტერებისთვის (int - იკავებს 4 ბაიტს, float იკავებს - 4 ბაიტს, double - 8 ბაიტს ) :
int main()
{
float a,*p1;
int b,*p2;
double c,*p3;
a=2.5; b=3; c=2.96;
p1=&a; p2=&b; p3=&c;
p1++; p2++; p3++;
printf(“%p  %p  %p “, p1,p2,p3);
}
	p1=63388  p2=64394  p3=64404;
	არცერთი პასუხი არ არის სწორი; -------------
	р1=63388 р2=64394 р3=64402;
	p1=3.5  p2=4  p3=B;
	რა დაიბეჭდება ფრაგმენტის შესრულების შემდეგ:
   int x[]={1, 4, 8, 5, 7, 4};
   int  *p, y;
   p=x+3;
   y=*p;
   printf(“%d “, y);
	 sizeof(x)+3;
	4;
	5; -------------
	7;
	რა დარდება ერთმანეთს მიმთითებლების შედარების დროს?
	შესაბამისი ცვლადების მნიშვნელობები
	მასივის შესაბამისი ინდექსები
	შესაბამისი მისამართები -----------------
	მიმთითებლების შედარება არ შეიძლება
	რა დაიბეჭდება ამ ფრაგმენტის შესრულების შედეგად?
double a[]={1,2,3,4,5,6,7,8};
double s =1;
for (int i=1; i<n; i+=2)
if(a[i]>0) s*=a[i]; 
printf (“%lf  “, s);
	a  მასივის ლუწინდექსიანი დადებითი წევრების ნამრავლი; 
	a მასივის კენტინდექსიანი წევრების ნამრავლი; ------------------
	a მასივის დადებითი  წევრების ნამრავლი; 
	a მასივის კენტინდექსიანი დადებითი  წევრების ნამრავლი; 
	რა დაიბეჭდება ამ ფრაგმენტის შესრულების შედეგად?
int n=8;
double a[]={1,2,3,4,5,6,7,8};
double  m=a[0];
for (int i=1; i<n; i++)
{if(a[i]>m) m=a[i]; } 
printf (“%lf  “, m);
	a მასივის კენტინდექსიან ელემენტებს შორის უდიდესი;
	a მასივის ლუწინდექსიან ელემენტებს შორის უდიდესი;
	a მასივის ნულოვანი ელემენტების რაოდენობა;
	a მასივის უდიდესი ელემენტი; ---------------




	----------------------------------------------

#include <stdio.h>
#include <math.h>

int main() {
    int a, b, c, k, z, y;
    k = 1;
    z = 2;
     
    for (int i=0; i < 3; i++) {
        
        printf("Sheiyvanet A: ");
        scanf("%d", &a);
        printf("Sheiyvanet B: ");
        scanf("%d", &b);
        printf("Sheiyvanet C: ");
        scanf("%d", &c);
        printf("\n"); // silamazistvis
        if ( a-b < c) {
            printf("if 1\n");
            y = (k < z)? k : z;
        } else if ( (a-b) == c ) {
            printf("if 2\n");
            switch (a+b) {
                case 1: 
                    printf("case1\n");
                    y=(2*a)+b; 
                    break;
                case 2:
                    printf("case2 (sadac araferi iprinteba)\n\n");
                    continue;
                case 3: 
                    y = a - b;
                    printf("case3\n");
                    break;
                default:
                    printf("case default\n");
                    y = cbrt(pow(a, 2)) - pow(cos(pow(b, 2)), 2);
                    break;
             }
        } else {
            printf("if 3\n");
            y = 0;
        }
        
        printf("Y = %d\n\n\n", y);
    }

    return 0;
}


	-------------------------------------------------------

/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <stdio.h>

int main()
{
    int C[5][5], B[5];
    
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            printf("Type num for C[%d][%d]: ", i, j);
            scanf("%d", &C[i][j]);
        }
    }
    
    int max = C[0][1];
    int maxi = 0;
    int maxj = 1;
    
    
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            if ( i != j ) {
                if ( C[i][j] > max ) {
                    max = C[i][j];
                    maxi = i;
                    maxj = j;
                }
            }
        }
    }
    
    if ( maxj != 1 ) {
        int temp = 0; 
        for ( int i = 0; i < 5; i++) {
            temp = C[i][1];
            C[i][1] = C[i][maxj];
            C[i][maxi] = temp;
        }
    }
    
    for ( int j = 0; j < 5; j++ ) {
        B[j] = C[maxi][j];
        printf("%d\n", B[j]);
    }
    

    
    

    return 0;
}




