


 
გაითვალისწინეთ ყველა მითითება, რომელიც ახლავს დავალების პირობას.
1.	კონსოლიდან data1  ფაილში შეიტანეთ სტრუქტურის (სტრიქონი1, სტრიქონი2 და მთელი რიცხვი) ჩანაწერები.  ჩანაწერების პირველი ორი ველი გადაწერეთ data2 ფაილში მესამე ველი გადაწერეთ data3 ფაილში. ფაილებში ჩაწერამდე სტრუქტურის ჩანაწერები დაბეჭდეთ კონსოლზე (გამოიყენეთ სტრუქტურა და დინამიური მასივი) (15 ქულა)
2.	ორგანზომილებიანი მასივი შეავსეთ მთელი რიცხვებით. დაბეჭდეთ შევსებული მასივი.  იპოვეთ მასივის მაქსიმალური ელემენტი და ამ ელემენტს ადგილი შეუცვალეთ თავისი სტრიქონის პირველ ელემენტთან. იპოვეთ მინიმალური ელემენტი და მას ადგილი შუცვალეთ თავისივე სტრიქონის ბოლო ელემენტთან.  დაბეჭდეთ შეცვლილი მასივი. მასივის შესავსებად, დასაბეჭდად და მასთან ყველა სხვა მოქმედებებისათვის გამოიყენეთ ფუნქციები. (15 ქულა)


3.	აღწერეთ  რას აკეთებს კოდის შემდეგი ფრაგმენტი (2 ქულა)
char str1[];
----------------
    int indexi=0;
    while (str1[indexi] != '\0' && str1[indexi] != 'k') {
        indexi++;
    }  int pos = indexi++;
პასუხი:   ეს პროგრამა არ ჩერდება, სანამ არ იპოვის k-ს და არ გაიგებს მის შესაბამის ინდექს, მაგრამ იგი თუ ვერ მოძევნის წააწყდება \0- რაც არის სტრიქონის დასასრულს.
თუ იპოვის k-ს შემდგომ ინდექს მიუმატებს ერთს და მიიღებს პოზიციას k-ს, თუ ვერა მაშ უბრალოდ სტრიქონის სისდიდეს მიიღებს.

4.	რას წარმოადგენს ჩანაწერი და როგორ მუშაობს ის (2 ქულა)
min = ricxvi1 < ricxvi2 ? ricxvi1 : ricxvi2;
პასუხი:  ეს ფუნქცია აკვირდება ჭეშმარიტობას, თუ რიცხვი1 არის მცრიე რიცხვი 2-ზე მაშ იგი შეჭმარიტია და მიიღებს რიცხვი1-ს მნიშვნელობას, წინააღმდეგ შემთხვევაში, თუ არ არის ჭეშმარიტი მოცემული ნიმუში ?-ის მარცხნივ იგი აიღებს მარჯვენა მნიშვნელობას : გვერდზე ანუ  რიცხვი2-ს

დახურული კითხვები (0,5 ქულა)
5.	რა დაიბეჭდება პროგრამის შესრულების შემდეგ:
------------
char* MyFunc(char *p) {
    p += 3;
    return p;
}
--------------------
    char *x, *y;
    x = "HELLO";
    y = MyFunc(x);
    printf("y = %s\n", y);
a.	ELLO
b.	LO * -------------------
c.	HELLO
d.	LLO
6.	ინფორმაციის გამოტანის ფუნქცია fprintf () საშუალებას გვაძლევს
a.	მივუთითოთ გამოტანის ნაკადი და გამოვიყენოთ იგი როგორც სტანდარტული ასევე შეცდომების და ფაილური ნაკადებით გამოტანისთვის * ------------------------
b.	გამოვიტანოთ ინფორმაცია მხოლოდ შეცდომების და ფაილური ნაკადებით
c.	გამოვიტანოთ ინფორმაცია მხოლოდ ფაილური ნაკადით
d.	გამოვიტანოთ ინფორმაცია მხოლოდ შეცდომების ნაკადით
7.	ფუნქცია რომლის პროტოტიპია char *strncat(char *dest, const char *src, size_t n); ასრულებს შემდეგს:
a.	მეორე სტრიქონს მიაბამს პირველის ბოლოში 
b.	მეორე სტრიქონის ბოლოში მიაბამს პირველი სტრიქონის მითითებული რაოდენობის სიმბოლოებს 
c.	პირველი სტრიქონის ბოლოში მიაბამს მეორე სტრიქონის მითითებული რაოდენობის სიმბოლოებს * ----------------------------
d.	პირველ სტრიქონს მიაბამს მეორე სტრიქონზე
8.	როდესაც scanf() ფუნქციას ვიყენებთ %s ფორმატის სპეციფიკატორთან ერთად სტრიქონის შესატანად
a.	ფუნქცია წაიკითხავს მთელ ხაზს
b.	ფუნქცია წაიკითხავს ხაზის ნაწილს და ბუფერს გაანთავისუფლებს
c.	ფუნქცია წაიკითხავს ხაზს პირველ ჰარიმდე და დანარჩენი ხაზი დარჩება ბუფერში * ---------------------
d.	ფუნქცია წაიკითხავს ხაზს მითითებულ ზომამდე
9.	ბიტობრივი & ოპერაცია გამოიყენება
a.	ბიტის ჩამოგდებისთვის * -------------------------
b.	ბიტის დაყენებისთვის
c.	ბიტის გადასამრავლებლად
d.	ბიტის შესაკრებად
10.	int *ptr  ------    ptr = NULL მოქმედება
a.	ათავისუფლებს მეხსიერებას, რომელზეც მიმთითებელი მიუთითებს
b.	ptr აღარ ინახავს გამოყოფილი მეხსიერების მისამართს ---------- (პოინტერი განულდება და გახდება 0, მაგრამ ის მეხსიერება დარჩება)
c.	აცხადებს ახალ მიმთითებელს
11.	რომელია ფუნქცია პრედიკატის მიერ დასაბრუნებელი ტიპი
a.	integer 
b.	double 
c.	char
d.	integer (1 ან 0) * -------------------------
12.	ბიტობრივი ~ ოპერაცია 
a.	ანულებს ოპერანდის ყველა ბიტს
b.	დააყენებს ოპერანდის  ყველა ბიტს
c.	შეუცვლის მნიშვნელობას ოპერანდის ყველა ბიტს --------- (ყველა ბიტს შეაბრუნებს)
13.	ფუნქცია რომლის პროტოტიპია int strcmp(const char *str1, const char *str2); ასრულებს შემდეგს:
a.	ადარებეს ორი სტრიქონის სიგრძეს
b.	ადარებს ორ სტრიქონში სიტყვების რაოდენობას
c.	ორ სტრიქონს ადარებს ლექსიკოგრაფიულად * --------------
d.	ადარებს ორ სტრიქონში სასვენი ნიშნების რაოდენობას
14.	fopen() ფუნქციას ფაილის გასახსნელად სჭირდება
a.	სამი არგუმენტი: ფაილის სახელი, ფაილის გახსნის რეჟიმი და ნაკადის ტიპი
b.	ორი არგუმენტი:  ფაილის სახელი და ნაკადის ტიპი
c.	ორი არგუმენტი: ფაილის სახელი და ფაილის გახსნის რეჟიმი  * ----------
d.	ორი არგუმენტი: ფაილის გახსნის რეჟიმი და ნაკადის ტიპი
15.	ფუნქცია რომლის პროტოტიპია char *strchr(const char *str, int c); ასრულებს შემდეგს:
a.	აბრუნებს სტრიქონში კონკრეტული სიმბოლოს პირველის გამოჩენის მისამართს * --------------
b.	აბრუნებს მითითებული სიმბოლოს სტრიქონში გამოჩენის ყველა პოზიციის მიმამართს
c.	აბრუნებს სტრიქონში კონკრეტული  ქვესტრიქონის გამოჩენის მიმსამართს
d.	აბრუნებს სტრიქონში მითითებული სიმბოლოს რაოდენობას
16.	ფუნქცია რომლის პროტოტიპია (int *)realloc(oldArray, new_size); ასრულებს შემდეგს:
a.	გამოყოფს მეხსიერების ბლოკს მასივისვის
b.	ათავისუფლებს მასივისთვის გამოყოფილ მეხსიერებას
c.	ცვლის უკვე გამოყოფილი მეხსიერების ბლოკის ზომას  * -----------------
d.	არეგულირებს მასივისთვის გამოყოფილი მეხსიერების ბლოკის ზომას

